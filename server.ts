// FIX: Remove 'process' import to use the correct global process object and resolve type conflicts.
// Fix: Changed the express import to use the default export. This allows for using qualified types
// like `express.Request` to avoid potential type conflicts with other libraries.
// FIX: Import Request, Response, and Express types from express to resolve type errors with handlers and the app instance.
import express, { Request, Response, Express } from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { GoogleGenAI, Modality } from '@google/genai';

// --- Types and Constants (duplicated from frontend for simplicity) ---
enum Gender {
  MALE = 'Male',
  FEMALE = 'Female',
}
const MODEL_NAME = 'gemini-2.5-flash-image-preview';

const buildPrompt = (
  gender: Gender,
  suitPrompt: string,
  backgroundPrompt: string,
  framingPrompt: string,
  anglePrompt: string,
  expressionPrompt: string
): string => {
  return `You are an expert photo editor. Transform the user's photo into a professional headshot suitable for a resume.

**Strict Rules:**
1. **Identity Preservation:** The person's core facial features (eyes, nose, bone structure) and hairstyle MUST remain completely unchanged. You are forbidden from altering their fundamental identity.
2. **Facial Expression:** ${expressionPrompt}
3. **Natural Appearance:** Avoid any excessive or unrealistic skin smoothing, airbrushing, or other facial modifications. The final image must look natural and authentic.
4. **Focus on Clothing, Background, and Composition:** Your primary tasks are:
   - Replace the existing clothing with the specified formal attire.
   - Replace the background with the specified color.
   - ${anglePrompt}
   - ${framingPrompt}
5. **Realistic Integration:** The new clothing must be seamlessly blended. Pay close attention to the neckline, shadows, and lighting to match the original photo.

**User's Request:**
- **Gender of Person in Photo:** ${gender}
- **Desired Attire:** ${suitPrompt}
- **Desired Background:** ${backgroundPrompt}
- **Final Composition:** A natural, business-style portrait with the specified framing and angle.

Generate only the edited image. Do not output any text.`;
};

// --- Server Setup ---
// Fix: Use the qualified type `express.Express` to ensure the correct type is used for the app instance.
// FIX: Use the explicitly imported `Express` type for the app instance to fix `app.use` errors.
const app: Express = express();
app.use(express.json({ limit: '20mb' }));

if (!process.env.API_KEY || process.env.API_KEY === 'YOUR_API_KEY_HERE') {
  console.error("FATAL: API_KEY environment variable is not set on the server.");
  // FIX: The type error on process.exit is likely a side-effect of other type conflicts. Fixing express types should resolve this.
  process.exit(1);
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// --- API Router ---
// FIX: Use an Express Router to modularize API routes and resolve potential routing conflicts.
const apiRouter = express.Router();

// The handler is now at '/generate' because it will be mounted under '/api'
// Fix: Use qualified types `express.Request` and `express.Response` to resolve errors.
// FIX: Use the explicitly imported `Request` and `Response` types for route handlers.
apiRouter.post('/generate', async (req: Request, res: Response) => {
  try {
    const { imageBase64, mimeType, gender, suitPrompt, backgroundPrompt, framingPrompt, anglePrompt, expressionPrompt } = req.body;

    const requiredFields = { imageBase64, mimeType, gender, suitPrompt, backgroundPrompt, framingPrompt, anglePrompt, expressionPrompt };
    for (const [field, value] of Object.entries(requiredFields)) {
      if (!value) {
        return res.status(400).json({ error: `Missing required parameter: ${field}` });
      }
    }

    const prompt = buildPrompt(gender, suitPrompt, backgroundPrompt, framingPrompt, anglePrompt, expressionPrompt);
    
    const response = await ai.models.generateContent({
      model: MODEL_NAME,
      contents: {
        parts: [
          { inlineData: { data: imageBase64, mimeType } },
          { text: prompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.find((p: any) => p.inlineData);
    if (!part?.inlineData) {
      return res.status(502).json({ error: 'No image was generated by the AI model.' });
    }

    res.json({
      dataUrl: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`,
    });
  } catch (error: any) {
    console.error('Error in /api/generate:', error);
    res.status(500).json({ error: 'An unexpected error occurred during image generation.', details: error.message });
  }
});

// Mount the API router under the /api path
app.use('/api', apiRouter);


// --- Static File Serving ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// Serve assets from the project root directory where index.html is located.
const publicPath = __dirname;

app.use(express.static(publicPath));

// SPA Fallback: All other GET requests are redirected to index.html
// Fix: Use qualified types `express.Request` and `express.Response` to resolve errors.
// FIX: Use the explicitly imported `Request` and `Response` types for route handlers.
app.get('*', (req: Request, res: Response) => {
  res.sendFile(path.join(publicPath, 'index.html'));
});


// --- Start Server ---
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`Server listening on http://localhost:${PORT}`);
});
